Poker Discord Bot Documentation

Overview
----------
The Poker Discord Bot is designed to facilitate poker games among players on a Discord server.
It tracks the buy-ins, buy-outs, and overall earnings or losses of players to provide a seamless experience for those who enjoy poker.
Players can be added or updated, and their game statistics can be tracked reliably, even if they change their Discord display names over time.

How the Bot Works
--------------------
The bot uses the Discord API, along with SQLite, to store player information and game statistics.
The key features include:

Managing poker games with commands to start games and log results.

Storing player data in an SQLite database, ensuring that statistics are tied to each player's 
unique Discord ID rather than their changeable display name.

Tracking winnings and losses of players after each game.

The main components include:

Bot Commands: Commands allow users to start games, add players, and display leaderboards.

Database Management: All player statistics are stored in an SQLite database to ensure data persistence and consistency.

Discord Mentions: When logging results, players are tagged to ensure that their Discord ID is captured, 
maintaining the integrity of the data.

COMMANDS
-----------
Here is an overview of each command and what it does:

!startgame

Usage: !startgame @player1 @player2 ...

Starts a new poker game with the tagged players. The bot requires at least two players to start a game.

The game will not proceed if there is already an ongoing game.

Player details are added or updated in the database, ensuring their most recent Discord names are recorded.

!game_results

Usage: !game_results @player buy-in: (100) buy-out: (200) stack: (300) net: (100)

Allows a user to post the results of a completed poker game. Each player must be tagged
using @mention and their respective game data must be provided.

The bot uses regular expressions to extract player IDs and their results, ensuring that the statistics
are correctly updated in the database.

Player stats (winnings and losses) are updated based on the provided net total.

Supports multiple players, all provided in the same format.

!leaderboard

Usage: !leaderboard

Displays the current leaderboard with all players and their cumulative winnings and losses.

The data is fetched from the SQLite database, and players are sorted by their earnings.

The leaderboard is displayed as a simple text list, showing player names and their statistics.

KEY FEATURES
--------------
Unique Player Identification: Players are tracked based on their Discord ID to ensure consistency
even if their display name changes.

Database Persistence: The bot uses an SQLite database to store player statistics, ensuring that all data
remains persistent between bot restarts.

Ease of Use: The commands are simple and intuitive, allowing users to easily track poker games and view results.

HOW TO USE THE BOT
-------------------
Starting a Game: Use !startgame followed by tagging at least two players. This initializes the game
and adds players to the database if they are not already present.

Posting Game Results: After a game, the results can be posted using !game_results. Players should be tagged,
and their game data should be provided in the required format.

Viewing the Leaderboard: Use !leaderboard to view the current standings, showing how well each player has
performed in past games.

FUTURE PLANS
-------------
Here are some features planned for future releases:

Improved Leaderboard: Implementing Discord embeds to create a more visually appealing leaderboard thatâ€™s
easier to read and navigate.

Game History Tracking: Adding a history feature so that players can view detailed information about past games,
including timestamps and participants.

Multiple Concurrent Games: Allowing for multiple games to be played concurrently in different channels,
improving scalability for larger Discord servers.

Player Statistics Dashboard: Creating a web-based dashboard to provide players with an in-depth view of their
performance over time, including visual graphs.

Admin Control Panel: Providing admins with additional commands to manage ongoing games, reset player stats,
or configure game settings.

SECURITY NOTE
--------------
Important: The bot token is currently hard-coded in the script. It is crucial to move the token to a secure
environment variable or a configuration file to protect your bot from unauthorized access.


Contributing
------------
Contributions are welcome! If you want to add features or help improve the bot, please feel free to submit
a pull request on the GitHub repository. Future improvements are listed above, but new ideas are always appreciated.


CONTACT
---------
If you have any questions or need assistance, please reach out to the bot developer or create an issue
on the GitHub repository.


